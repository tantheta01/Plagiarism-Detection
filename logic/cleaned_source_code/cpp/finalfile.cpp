#include <bits/stdc++.h>using namespace std;string fundamental[6];void PartThree(string ToFind, int k) {int ToFind.length();vector<string> AllInverses[n];int 0;for(int 0;i<k;i++){max(maxFChar, fundamental[i].length());for(int 0;i<n;i++) {if(i+1 <= maxFChar) {for(int 0;j<k;j++){if(fundamental[j].length() > i && fundamental[j].substr(fundamental[j].size() - i - 1, i+1) == ToFind.substr(0, i+1)){string S;S += (char)('a' + j);AllInverses[i].push_back(S);for(int 0;j<k;j++) {if((i+1) > )int actualPart2(int n, int Posn, vector<int>matrix, int k, int digit){if(=0)return dig;long 0;for(int 0;i<S[digit].length();i++){totlen += Part1(n-1, matrix, k, (int)(S[digit][i]-'a'), 1e18);if(totlen>=Posn){return actualPart2(n-1, totlen-Part1(n-1, matrix, k, (int)(S[digit][i]-'a'), 1e18), k, S[digit][i]-'a');int Part2(long long Posn, vector<int>matrix, int k){int 600;int 1;while(hi>low){int (hi+low)/2;long long Part1(mid, matrix, k, 0, Posn);if(n<Posn){mid+1;else if(=Posn){mid;break;else{mid;long long Part1(int n, int matrix[][6], int k, int digit, long long maxLen) {vector<int> initialVec(k);initialVec[digit]=1;int currentDic[k][k], powerDic[k][k];for(int 0;i<k;i++){for(int 0;j<k;j++){currentDic[i][j] = 1;powerDic[i][j] = matrix[i][j];while(n){if(n%2){for(int 0;i<k;i++){for (int  0; j < k; ++j)newDict[i].push_back(currentDic[i][j]);currentDic[i][j]=0;newPower[i].push_back(powerDic[i][j]);powerDic[i][j] = 0;for(int 0;i<k;i++){for(int 0;j<k;j++){for(int 0;l<k;l++){currentDic[i][j] += newDict[i][l]*powerDic[l][j];for (int  0; i < k; ++i)for (int  0; j < k; ++j)for (int  0; l < k; ++l)powerDic[i][j] += newPower[i][k]*newPower[k][j];n/=2;long long 0;for (int  0; i < k; ++i)ans += currentDic[i][digit];return ans;