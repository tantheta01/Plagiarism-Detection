#include <bits/stdc++.h>using namespace std;#include<chrono>class quad_nodepublic:int size;bool value;quad_node *topLeft, *topRight, *bottomLeft, *bottomRight;quad_node(int s){nullptr;nullptr;nullptr;nullptr;quad_node(int s, int val){this-> s;this-> val;this-> nullptr;this-> nullptr;this-> nullptr;this-> nullptr;~quad_node(){if (this)delete this->topLeft;delete this->topRight;delete this->bottomLeft;delete this->bottomRight;this-> nullptr;this-> nullptr;this-> nullptr;this-> nullptr;return;quad_node(quad_node *q){nullptr;nullptr;nullptr;nullptr;if(q->topLeft != nullptr){new quad_node(q->topLeft);new quad_node(q->topRight);new quad_node(q->bottomLeft);new quad_node(q->bottomRight);q->size;q->value;return;quad_node(quad_node const &q){if (topRight!=nullptr)try{delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;catch(...){}nullptr;q.size;q.value;new quad_node(*(q.topRight));new quad_node(*(q.topLeft));new quad_node(*(q.bottomRight));new quad_node(*(q.bottomLeft));void set(int x1, int y1, int x2, int y2, int b){if (= 0)b;return;if(= 0 && = (1ll<<size) && = 0 && = (1ll<<size)){delete topLeft;delete topRight;delete bottomLeft;delete bottomRight;nullptr;b;return;if (= x2 || = y2)return;else{if(= nullptr){/*if(topRight!=nullptr || bottomLeft != nullptr || bottomRight != nullptr)cout<<"oyeee"<<endl<<endl<<endl<<endl;*/if(= 0){return;delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;new quad_node(size-1, value);new quad_node(size-1, value);new quad_node(size-1, value);new quad_node(size-1, value);if(x1 < (1<<(size-1))){if (y1 < (1<<(size-1)))topLeft->set(x1, y1, min((1<<(size-1)), x2), min((1<<(size-1)), y2), b);if (y2 > (1<<(size-1)))bottomLeft->set(x1, max(0, y1 - (1<<(size-1))), min((1<<(size-1)), x2), y2-(1<<(size-1)), b);if(x2 > (1<<(size-1))){if (y1 < (1<<(size-1)))topRight->set(max(0, x1 - (1<<(size-1))), y1, x2-(1<<(size-1)), min((1<<(size-1)), y2), b);if (y2 > (1<<(size-1)))bottomRight->set(max(0, x1-(1<<(size-1))), max(0, y1-(1<<(size-1))), x2-(1<<(size-1)), y2-(1<<(size-1)), b);if (topLeft->= nullptr && topRight->= nullptr && bottomRight->= nullptr && bottomLeft->= nullptr && topLeft->= topRight->value && topRight->= bottomLeft->value && bottomLeft->= bottomRight->value)topRight->value;delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;nullptr;int get(int x1, int y1){if (=0)return value;if (= nullptr)return value;if(x1 < (1<<(size - 1))){if(y1 < (1<<(size - 1))){return topLeft->get(x1, y1);else{// cout<<"hh33"<<endl;return bottomLeft->get(x1, y1 - (1<<(size - 1)));else{if(y1 < (1<<(size - 1))){// cout<<"hh44"<<endl;return topRight->get(x1 - (1<<(size - 1)), y1);else{// cout<<"hh55"<<endl;return bottomRight->get(x1 - (1<<(size - 1)), y1 - (1<<(size - 1)));void overlap(quad_node *q){if(=nullptr){if (= 1)return;else{if(q->= nullptr){q->value;return;else{// cout<<"hahahaha"<<endl;new quad_node(q->topLeft);new quad_node(q->topRight);new quad_node(q->bottomLeft);new quad_node(q->bottomRight);return;if (q->= nullptr)// if(a){// 	cout<<"here is "<<endl;// }if (q->= 1)// cout<<"id::2"<<endl;delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;nullptr;nullptr;nullptr;nullptr;1;return;else{// cout<<"id::3"<<endl;return;else{// cout<<"id::6"<<endl;topLeft->overlap(q->topLeft);topRight->overlap(q->topRight);bottomLeft -> overlap(q->bottomLeft);bottomRight->overlap(q->bottomRight);if (topLeft->= nullptr && topRight->= nullptr && bottomRight->= nullptr && bottomLeft->= nullptr && topLeft->= topRight->value && topRight->= bottomLeft->value && bottomLeft->= bottomRight->value)// cout<<"id::7"<<endl;topRight->value;delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;nullptr;nullptr;nullptr;nullptr;return;return;// if(a){// 	cout<<"no return"<<endl;// }void intersect(quad_node *q){// cout<<"This ass killed meeeeeeeeee"<<endl<<size<<endl;if(= 0){value & q->value;// if(topRight!=nullptr)/*cout<<"Oye bhosdike sunnnnnnnnnnnnnnnnnnnnnnnnnnnnn"<<endl;*/return;if (q->= nullptr)if (q->= 0)if(topRight!=nullptr){delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;nullptr;nullptr;nullptr;nullptr;0;return;else{return;if (= nullptr)if (= 0)return;else{new quad_node(q->topLeft);new quad_node(q->topRight);new quad_node(q->bottomLeft);new quad_node(q->bottomRight);return ;else{topLeft->intersect(q->topLeft);topRight->intersect(q->topRight);bottomLeft -> intersect(q->bottomLeft);bottomRight->intersect(q->bottomRight);if (topLeft->= nullptr && topRight->= nullptr && bottomRight->= nullptr && bottomLeft->= nullptr && topLeft->= topRight->value && topRight->= bottomLeft->value && bottomLeft->= bottomRight->value)topRight->value;delete topRight;delete topLeft;delete bottomRight;delete bottomLeft;nullptr;nullptr;nullptr;nullptr;void complement(){if (= nullptr)!value;return;topLeft->complement();topRight->complement();bottomRight->complement();bottomLeft->complement();void incsize(int k){size+=k;if (topRight!=nullptr)topRight->incsize(k);topLeft->incsize(k);bottomRight->incsize(k);bottomLeft->incsize(k);long long decsize(int k){if (size > k)size-=k;if (=nullptr)return 0ll;else{topRight->decsize(k);topLeft->decsize(k);bottomRight->decsize(k);bottomLeft->decsize(k);return 0ll;else if(size < k){if (= nullptr)long long  (1ll<<(2*size));return value*a1;else{long long  topRight->decsize(k) + topLeft->decsize(k) + bottomRight->decsize(k) + bottomLeft->decsize(k);return Ans;else{if (= nullptr)return 0ll;long long  topRight->decsize(k) + topLeft->decsize(k) + bottomRight->decsize(k) + bottomLeft->decsize(k);delete topRight;delete bottomRight;delete topLeft;delete bottomLeft;nullptr;nullptr;nullptr;nullptr;if (Ans >= (1ll<<(2*size -1)))else 0;return 0ll;quad_node* extract(int x1, int y1, int m){if(= 0){// cout<<"id::6"<<endl;quad_node * new quad_node(0, this->get(x1, y1));return q;if (= nullptr)quad_node * new quad_node(m, value);return q;// if()return new quad_node(0, value);else{// cout<<"M is "<<m<<endl;long long  x1+(1<<m);long long  y1+(1<<m);long long  (1<<(size-1));if (x2 <= halfLine && y2 <= halfLine)// cout<<"id::1"<<endl;quad_node * topLeft->extract(x1, y1, m);// if (q->topLeft != nullptr && q->= nullptr)// {// 	// cout<<"Theek hai ye problem hai yaaar maereko merkw qwhhfaaoef\n\n\n"<<endl;// }return q;else if(x2 <= halfLine && y1 >= halfLine){// cout<<"id::2"<<endl;quad_node * bottomLeft->extract(x1, y1-halfLine, m);return q;else if (x1 >= halfLine && y2 <= halfLine)quad_node * topRight->extract(x1-halfLine, y1, m);return q;else if (x1 >= halfLine && y1 >= halfLine)quad_node * bottomRight->extract(x1-halfLine, y1-halfLine, m);return q;quad_node*  new quad_node(m);Q-> this->extract(x1, y1, m-1);Q-> this->extract((x1+x2)/2, y1, m-1);Q-> this->extract(x1, (y1+y2)/2, m-1);Q-> this->extract((x1+x2)/2, (y1+y2)/2, m-1);if (Q->topLeft->= nullptr && Q->topRight->= nullptr && Q->bottomRight->= nullptr && Q->bottomLeft->= nullptr && Q->topLeft->= Q->topRight->value && Q->topRight->= Q->bottomLeft->value && Q->bottomLeft->= Q->bottomRight->value){Q-> Q->topRight->value;delete Q->topLeft;delete Q->topRight;delete Q->bottomLeft;delete Q->bottomRight;Q-> nullptr;Q-> nullptr;Q-> nullptr;Q-> nullptr;return Q;class quad_treepublic:int height;quad_node *head;quad_tree(){nullptr;quad_tree(int n){n;nullptr;new quad_node(n);quad_tree(int n, int b){n;new quad_node(n, b);~quad_tree(){0;delete head;nullptr;quad_tree(quad_tree const &q){nullptr;delete head;quad_node * new quad_node(q.head);D;q.height;void set(int x1, int y1, int x2, int y2, int b){// if(= nullptr)return;head->set(x1, y1, x2+1, y2+1, b);int get(int x1, int y1){return head->get(x1, y1);void overlap(quad_tree const &q){head->overlap(q.head);void intersect(quad_tree const &q){head->intersect(q.head);void complement(){head->complement();void resize(int m){if(= height)return;if(m > height)head->incsize(m-height);else{head->decsize(height-m);void extract(int x1, int y1, int m){m;quad_node * head->extract(x1, y1, m);delete head;q;