#include <bits/stdc++.h>using namespace std;set<string>AllSeen;string fundamental[6];string findString(int index, int power) {string current;current += (char)('a' + index);int 0;while(cp < power){string temp;for (int  0; i < current.length(); ++i)temp += fundamental[(int)(current[i]-'a')];++cp;temp;return current;void computeLPS(string pattern, int *lps){int  pattern.length();int 1;lps[0]=0;int 0;while(i<n) {if(pattern[i] == pattern[len]){len++;lps[i] = len;i++;else if(len != 0){lps[len-1];else{lps[i]=0;i++;int KMPdo(string pattern, string mainstring, int *lps) {int  mainstring.length();int  pattern.length();int 0, 0;while(i<n) {if(mainstring[i] == pattern[j]){i++;j++;if(= m) {return i-1;else if(i<n && pattern[j] != mainstring[i]) {if(j!=0)lps[j-1];else{i+=1;return -1;int partcGeneral(string S, int k) {string  fundamental[0],  "a";int 1;while(high.length() < S.length()){int l;if(low.empty()){else{low.length();int high.length();for(int l; i<m ;i++){high += fundamental[(int)(high[i] - 'a')];power += 1;high.substr(0, m);int lps[S.length()];computeLPS(S, lps);string allFunds[k];allFunds[0] = high;bool filled[k];for(int 1;i<k;i++){filled[i]=0;filled[0]=1;string  "a",  "",  "";int  power;int  0;bool  1;while(next) {if(AllSeen.size() >= 100)break;for(int l;i<expansionNeeded.length();i++){int  (int)(expansionNeeded[i] - 'a');if(!filled[index]){allFunds[index] = findString(index, power);filled[index]=1;while(!theonebig.empty() && theonebig.length() >= 3 && theExpansion.length() - allFunds[(int)(theonebig[0]-'a')].length() >= S.length()){theExpansion.erase(0, allFunds[(int)(theonebig[0]-'a')].length());theonebig.erase(theonebig.begin());theonebig += expansionNeeded[i];theExpansion += allFunds[index];if(AllSeen.empty() || AllSeen.find(theonebig) == AllSeen.end()){1;AllSeen.insert(theonebig);int  KMPdo(S, theExpansion, lps);if(pos1 != -1)return ans;int  expansionNeeded.length();for(int  l; i<clen; i++){expansionNeeded += allFunds[(int)(expansionNeeded[i] - 'a')];clen;ans += 1;return -1;int partd(string S, int k){string  fundamental[0];string  "a";while(R.length() < 2*S.length()){int  T.length();R;for(int l;i<T.length();i++){R += fundamental[(int)(T[i]-'a')];int  0;int 0;for(int 0;i<R.length();i++){if(=S.length()){ i; break;}if(S[cchar] == R[i]){cchar++;if(= S.length()){return anss;elsereturn -1;int main(int argc, char const *argv[])int  3;fundamental[0] = "ab";fundamental[1] = "bc";fundamental[2] = "c";string  "";for(int 0;i<1000;i++){S += (char)('a' + (i%3));cout<<partcGeneral(S, k);return 0;